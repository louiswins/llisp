<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="obj">
    <DisplayString Condition="type == CELL">{(cell*)this,na}</DisplayString>
    <DisplayString Condition="type >= NUM &amp;&amp; type &lt;= BUILTIN">{(obj_union*)this,na}</DisplayString>
    <DisplayString Condition="type == CONTN">{(contn*)this,na}</DisplayString>
    <DisplayString Condition="type == STRING">{*(string*)this}</DisplayString>
    <DisplayString Condition="type == SYMBOL">{*(string*)this,sb}</DisplayString>
    <DisplayString Condition="type == ENV">{(env*)this,na}</DisplayString>
    <DisplayString Condition="type == LAMBDA || type == MACRO">{(closure*)this,na}</DisplayString>
    <Expand>
      <ExpandedItem Condition="type == CELL">(cell*)this</ExpandedItem>
      <ExpandedItem Condition="type >= NUM &amp;&amp; type &lt;= BUILTIN">(obj_union*)this</ExpandedItem>
      <ExpandedItem Condition="type == CONTN">(contn*)this</ExpandedItem>
      <ExpandedItem Condition="type == STRING || type == SYMBOL">(string*)this</ExpandedItem>
      <ExpandedItem Condition="type == ENV">(env*)this</ExpandedItem>
      <ExpandedItem Condition="type == LAMBDA || type == MACRO">(closure*)this</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="obj_union">
    <DisplayString Condition="o.type == NUM">{num}</DisplayString>
    <DisplayString Condition="o.type == FN || o.type == SPECFORM">{fn,na}</DisplayString>
    <DisplayString Condition="o.type == BUILTIN">{builtin,sb}</DisplayString>
    <Expand>
      <Item Name="Type">o.type</Item>

      <Item Name="Num" Condition="o.type == NUM">num</Item>

      <Item Name="Fn" Condition="o.type == FN || o.type == SPECFORM">fn,na</Item>
      <Item Name="Name" Condition="o.type == FN || o.type == SPECFORM">fnname,na</Item>

      <Item Name="Builtin" Condition="o.type == BUILTIN">builtin,sb</Item>
    </Expand>
  </Type>

  <Type Name="cell">
    <DisplayString Condition="tail->type != CELL &amp;&amp; tail != (obj*)&amp;nil" IncludeView="noparens">{*head} . {*tail}</DisplayString>
    <DisplayString Condition="tail->type != CELL &amp;&amp; tail != (obj*)&amp;nil" ExcludeView="noparens">({*head} . {*tail})</DisplayString>
    <DisplayString Condition="tail == (obj*)&amp;nil" IncludeView="noparens">{*head}</DisplayString>
    <DisplayString Condition="tail == (obj*)&amp;nil" ExcludeView="noparens">({*head})</DisplayString>
    <DisplayString Condition="tail->type == CELL" IncludeView="noparens">{*head} {*tail,view(noparens)}</DisplayString>
    <DisplayString Condition="tail->type == CELL" ExcludeView="noparens">({*head} {*tail,view(noparens)})</DisplayString>
    <Expand>
      <Item Name="Head">*head</Item>
      <Item Name="Tail">*tail</Item>
    </Expand>
  </Type>

  <Type Name="env">
    <DisplayString>env {{size = {table.size}}}</DisplayString>
    <Expand>
      <Item Name="Parent">parent</Item>
      <ExpandedItem>table</ExpandedItem>
    </Expand>
  </Type>
  
  <Type Name="contn">
    <DisplayString Condition="data">{*data} -&gt; {fn,na}</DisplayString>
    <DisplayString Condition="!data">NULL -&gt; {fn}</DisplayString>
    <Expand>
      <Item Name="Data">data</Item>
      <Item Name="Env">env</Item>
      <Item Name="Next" Condition="next">next</Item>
      <Item Name="Fn" Condition="fn">fn,na</Item>
    </Expand>
  </Type>

  <Type Name="closure">
    <DisplayString Condition="o.type == LAMBDA &amp;&amp; !closurename">[lambda args={*args}]</DisplayString>
    <DisplayString Condition="o.type == LAMBDA &amp;&amp; closurename">[lambda {closurename,na} args={*args}]</DisplayString>
    <DisplayString Condition="o.type == MACRO &amp;&amp; !closurename">[macro args={*args}]</DisplayString>
    <DisplayString Condition="o.type == MACRO &amp;&amp; closurename">[macro {closurename,na} args={*args}]</DisplayString>
    <Expand>
      <Item Name="Args">*args</Item>
      <Item Name="Name">closurename,na</Item>
      <Item Name="Code">*code</Item>
      <Item Name="Env">*env</Item>
    </Expand>
  </Type>

  <Type Name="string">
    <DisplayString>{str,[len]s8}</DisplayString>
    <StringView>str,[len]s8</StringView>
    <Expand>
      <Item Name="str">str,[len]s8</Item>
      <Item Name="len">len</Item>
    </Expand>
  </Type>

  <Type Name="string_builder">
    <DisplayString>{buf->str,[used]s8}</DisplayString>
    <StringView>buf->str,[used]s8</StringView>
    <Expand>
      <Item Name="str">buf->str,[used]s8</Item>
      <Item Name="cap">buf->len</Item>
      <Item Name="len">buf</Item>
    </Expand>
  </Type>

  <Type Name="ht_entry">
    <DisplayString>{key} -&gt; {*value}</DisplayString>
  </Type>
  <Type Name="hashtab">
    <DisplayString>hashtab {{size = {size}}}</DisplayString>
    <Expand>
      <CustomListItems>
        <Variable Name="cur" InitialValue="0" />
        <Size>size</Size>
        <Loop>
          <Exec>cur += __findnonnull(e->entries + cur, cap*2 - cur) / 2</Exec>
          <If Condition="e->entries[cur].key != ((struct string *)1)">
            <Item>e->entries[cur]</Item>
          </If>
          <Exec>cur++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
</AutoVisualizer>
