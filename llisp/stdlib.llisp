(define nil ())
(define null? (lambda (x) (eq? x nil)))

(define zero? (lambda(n) (= 0 n)))

(define #t (= 0 0))
(define #f (= 0 1))
(define not (lambda (x) (if x #f #t)))

(define cadr (lambda (p) (car (cdr p))))
(define cddr (lambda (p) (cdr (cdr p))))
(define caddr (lambda (p) (car (cdr (cdr p)))))

; bootstrap macros
(define unquote (lambda args (error "unquote , must only be used within quasiquote `")))
(define unquote-splicing (lambda args (error "unquote-splicing ,@ must only be used within quasiquote `")))
(define quasiquote (macro (data)
  (cond ((not (pair? data))   ; `x => 'x
         (list 'quote data))
        ((eq? (car data) 'unquote)   ; `,x => x
         (cadr data))
        ((and (pair? (car data)) (eq? (car (car data)) 'unquote-splicing))   ; `(,@x . y) => (append x `y)
         (list 'append (cadr (car data)) (list 'quasiquote (cdr data))))
        (else   ; `(x . y) => (`x . `y)
         (list 'cons (list 'quasiquote (car data)) (list 'quasiquote (cdr data)))))))

; if in terms of cond
;(define if (macro (cnd then . els)
;  (cons 'cond (cons (list cnd then)
;                           (cond ((null? els) ())
;                                 (else (list (cons #t els))))))))

; cond in terms of if
; (quasiquote) uses (cond), so do it manually
(define cond (macro condns
  (if (null? condns)
      #f
      (if (null? (cdr (car condns)))
          (let ((sym (gensym)))                         ; hygiene :)
            (list 'let (list (list sym (car (car condns))))
               (list 'if sym sym (cons 'cond (cdr condns)))))
          (if (if (null? (cdr condns)) (eq? (car (car condns)) 'else))
              (cons 'begin (cdr (car condns)))          ; just do it if you saw else in the last slot
              (list 'if (car (car condns))              ; test
                    (cons 'begin (cdr (car condns)))    ; result
                    (cons 'cond (cdr condns))))))))

(define map (lambda (fn lst)
  (if (null? lst)
      nil
      (cons (fn (car lst)) (map fn (cdr lst))))))
(define for-each (lambda (fn lst)
  (map fn lst)
  nil))

(define filter (lambda (fn lst)
  (define filter-helper (lambda (fn lst accum)
    (cond ((null? lst) accum)
          ((fn (car lst)) (filter-helper fn (cdr lst) (cons (car lst) accum)))
          (else (filter-helper fn (cdr lst) accum)))))
  (reverse (filter-helper fn lst nil))))

(define foldl (lambda (fn init lst)
  (if (null? lst)
      init
      (foldl fn (fn init (car lst)) (cdr lst)))))

(define foldr (lambda (fn init lst)
  (if (null? lst)
      init
      (fn (car lst) (foldr fn init (cdr lst))))))

(define list (lambda args args))

(define list? (lambda (lst)
  (define list?-helper (lambda (tortoise hare)
    (cond ((null? hare))
          ((eq? tortoise hare) #f) ; circular
          ((pair? hare)
           (if (null? (cdr hare))
               #t
               (list?-helper (cdr tortoise) (cddr hare)))))))
  (cond ((null? lst))
        ((pair? lst) (list?-helper lst (cdr lst))))))

(define let (macro (bindings . body)
  `((lambda ,(map car bindings) ,@body)
    ,@(map cadr bindings))))

(define let* (macro (bindings . body)
  (cond ((null? bindings)
         `(begin ,@body))
        ((null? (cdr bindings))
         `(let ,bindings ,@body))
        (else
         `(let (,(car bindings))
            (let* ,(cdr bindings) ,@body))))))

(define letrec (macro (bindings . body)
  `((lambda ()
     ,@(map (lambda (binding) `(define ,@binding)) bindings) ,@body))))

(define reverse (lambda (lst)
  (foldl (lambda (rest cur) (cons cur rest)) () lst)))

; matches python (without step)
(define range (lambda (a . b)
  (define range-helper (lambda (start cur rest)
    (if (< cur start)
        rest
        (range-helper start (- cur 1) (cons cur rest)))))
  (if (null? b)
      (range-helper 0 (- a 1) nil)
      (range-helper a (- (car b) 1) nil))))

; (quasiquote) uses (and), so do it the long way
(define and (macro args
  (cond ((null? args) #t) ; (and)
        ((not (pair? args)) (error "and must be given a list")) ; (and . x)
        ((null? (cdr args)) (car args)) ; (and x)
        (else (list 'if (car args) (cons 'and (cdr args)))))))

(define or (macro args
  (if (null? args)
      #f
      `(cond ,@(map list args)))))

(define append (lambda (xs ys)
  (foldr cons ys xs)))

(define nth (lambda (n lst)
  (cond ((null? lst) (error "list too short"))
        ((zero? n) (car lst))
        (else (nth (- n 1) (cdr lst))))))

(define pi 3.14159265358979323846)

; Disgustingly inefficient
; Also not guaranteed to work since we use doubles everywhere. Who knows about fmod.
(define prime? (lambda (n)
  (define prime-helper (lambda (k)
    (cond ((<= k 1) #t)
          ((= (% n k) 0) #f)
          (else (prime-helper (- k 2))))))
  (cond ((< n 2) #f)
        ((= n 2) #t)
        ((= 0 (% n 2)) #f)
        (else (prime-helper (- n 2))))))

(define length (lambda (lst)
  (define length-helper (lambda (n lst)
    (cond ((null? lst) n)
          ((pair? lst) (length-helper (+ n 1) (cdr lst)))
          (else (error "not a list")))))
  (length-helper 0 lst)))

(define equal? (lambda (a b)
  (cond ((eq? a b))
        ((and (string? a) (string? b)) (eq? (string-compare a b) 0))
        ((and (pair? a) (pair? b)) (and (equal? (car a) (car b))
                                        (equal? (cdr a) (cdr b)))))))

(define call/cc call-with-current-continuation)

; to help with copy/pasting from repl.it
(define define-macro (macro (nameargs . body)
  `(define ,(car nameargs) (macro ,(cdr nameargs) ,@body))))
